%implements s0_b0_ax3ih_Outputs "C"

%function OutputsForTID(block, system, tid) Output
%if tid == 0
%assign ::GlobalCurrentTID = 0
%assign tlcOutputsFcnOfS0B0 = OpaqueTLCBlockFcn("Outputs", 0, 0, 0, 4)
%assign tlcOutputsFcnOfS0B1 = OpaqueTLCBlockFcn("Outputs", 0, 1, 0, 4)
%assign tlcOutputsFcnOfS0B2 = OpaqueTLCBlockFcn("Outputs", 0, 2, 0, 4)
%assign tlcOutputsFcnOfS0B3 = OpaqueTLCBlockFcn("Outputs", 0, 3, 0, 4)
%assign tlcOutputsFcnOfS0B4 = OpaqueTLCBlockFcn("Outputs", 0, 4, 0, 4)
%assign tlcOutputsFcnOfS0B5 = OpaqueTLCBlockFcn("Outputs", 0, 5, 0, 4)
%assign tlcOutputsFcnOfS0B6 = OpaqueTLCBlockFcn("Outputs", 0, 6, 0, 4)
%assign tlcOutputsFcnOfS0B7 = OpaqueTLCBlockFcn("Outputs", 0, 7, 0, 4)
%assign tlcOutputsFcnOfS0B8 = OpaqueTLCBlockFcn("Outputs", 0, 8, 0, 4)
%assign tlcOutputsFcnOfS0B9 = OpaqueTLCBlockFcn("Outputs", 0, 9, 0, 4)
%assign tlcOutputsFcnOfS0B10 = OpaqueTLCBlockFcn("Outputs", 0, 10, 0, 4)
%assign tlcOutputsFcnOfS0B11 = OpaqueTLCBlockFcn("Outputs", 0, 11, 0, 4)
%assign tlcOutputsFcnOfS0B12 = OpaqueTLCBlockFcn("Outputs", 0, 12, 0, 4)
%assign tlcOutputsFcnOfS0B13 = OpaqueTLCBlockFcn("Outputs", 0, 13, 0, 4)
%assign tlcOutputsFcnOfS0B14 = OpaqueTLCBlockFcn("Outputs", 0, 14, 0, 4)
%assign tlcOutputsFcnOfS0B15 = OpaqueTLCBlockFcn("Outputs", 0, 15, 0, 4)
%assign tlcOutputsFcnOfS0B17 = OpaqueTLCBlockFcn("Outputs", 0, 17, 0, 4)
%assign tlcOutputsFcnOfS0B18 = OpaqueTLCBlockFcn("Outputs", 0, 18, 0, 4)
%assign tlcOutputsFcnOfS0B19 = OpaqueTLCBlockFcn("Outputs", 0, 19, 0, 4)
%assign tlcOutputsFcnOfS0B20 = OpaqueTLCBlockFcn("Outputs", 0, 20, 0, 4)
%assign tlcOutputsFcnOfS0B21 = OpaqueTLCBlockFcn("Outputs", 0, 21, 0, 4)
%assign tlcOutputsFcnOfS0B22 = OpaqueTLCBlockFcn("Outputs", 0, 22, 0, 4)
%assign tlcOutputsFcnOfS0B23 = OpaqueTLCBlockFcn("Outputs", 0, 23, 0, 4)
%assign tlcOutputsFcnOfS0B24 = OpaqueTLCBlockFcn("Outputs", 0, 24, 0, 4)
%<SLibCG_TrackDW(0)>\
%<SLibCG_TrackParam(0)>\
%<SLibCG_TrackBlockIO(0)>\
if (%<(SLibCGIRIsSampleHit(1, 0))>) {
    /* Constant: '<S7>/roll [rad]' */
    systema_B.rollrad = systema_P.rollrad_Value;
    /* Constant: '<S7>/dot roll [rad//s]' */
    systema_B.dotrollrads = systema_P.dotrollrads_Value;
    /* Constant: '<S7>/pitch [rad]' */
    systema_B.pitchrad = systema_P.pitchrad_Value;
    /* Constant: '<S7>/dot pitch [rad//s]' */
    systema_B.dotpitchrads = systema_P.dotpitchrads_Value;
    /* Constant: '<S7>/yaw [rad]' */
    systema_B.yawrad = systema_P.yawrad_Value;
    /* Constant: '<S7>/dot yaw [rad//s]' */
    systema_B.dotyawrads = systema_P.dotyawrads_Value;
    /* Constant: '<S7>/z [m]' */
    systema_B.zm = systema_P.zm_Value;
    /* Constant: '<S7>/dot z  [m//s]' */
    systema_B.dotzms = systema_P.dotzms_Value;
    /* Constant: '<S7>/x [m]' */
    systema_B.xm = systema_P.xm_Value;
    /* Constant: '<S7>/dot x [m//s]' */
    systema_B.dotxms = systema_P.dotxms_Value;
    /* Constant: '<S7>/y [m]' */
    systema_B.ym = systema_P.ym_Value;
    /* Constant: '<S7>/dot y [m//s]' */
    systema_B.dotyms = systema_P.dotyms_Value;
}
%<tlcOutputsFcnOfS0B0>\
%<tlcOutputsFcnOfS0B1>\
%<tlcOutputsFcnOfS0B2>\
%<tlcOutputsFcnOfS0B3>\
%<tlcOutputsFcnOfS0B4>\
%<tlcOutputsFcnOfS0B5>\
%<tlcOutputsFcnOfS0B6>\
%<tlcOutputsFcnOfS0B7>\
if (%<(SLibCGIRIsSampleHit(1, 0))>) {
    /* RandomNumber: '<S22>/White Noise' */
    systema_B.WhiteNoise = systema_DW.NextOutput;
    /* Gain: '<S22>/Output' */
    systema_B.Output = systema_P.Output_Gain * systema_B.WhiteNoise;
}
%<tlcOutputsFcnOfS0B8>\
/* Sum: '<S17>/Sum1' */
systema_B.Sum1 = systema_B.Output + systema_B.ROLLTransportDelay;
if (%<(SLibCGIRIsSampleHit(1, 0))>) {
    /* RandomNumber: '<S19>/White Noise' */
    systema_B.WhiteNoise_j = systema_DW.NextOutput_d;
    /* Gain: '<S19>/Output' */
    systema_B.Output_g = systema_P.Output_Gain_f * systema_B.WhiteNoise_j;
}
%<tlcOutputsFcnOfS0B9>\
/* Sum: '<S17>/Sum2' */
systema_B.Sum2 = systema_B.Output_g + systema_B.dotROLLTransportDelay;
if (%<(SLibCGIRIsSampleHit(1, 0))>) {
    /* RandomNumber: '<S21>/White Noise' */
    systema_B.WhiteNoise_d = systema_DW.NextOutput_l;
    /* Gain: '<S21>/Output' */
    systema_B.Output_h = systema_P.Output_Gain_p * systema_B.WhiteNoise_d;
}
%<tlcOutputsFcnOfS0B10>\
/* Sum: '<S17>/Sum4' */
systema_B.Sum4 = systema_B.Output_h + systema_B.PITCHTransportDelay;
if (%<(SLibCGIRIsSampleHit(1, 0))>) {
    /* RandomNumber: '<S18>/White Noise' */
    systema_B.WhiteNoise_o = systema_DW.NextOutput_c;
    /* Gain: '<S18>/Output' */
    systema_B.Output_i = systema_P.Output_Gain_a * systema_B.WhiteNoise_o;
}
%<tlcOutputsFcnOfS0B11>\
/* Sum: '<S17>/Sum5' */
systema_B.Sum5 = systema_B.Output_i + systema_B.dotPITCHTransportDelay;
if (%<(SLibCGIRIsSampleHit(1, 0))>) {
    /* RandomNumber: '<S23>/White Noise' */
    systema_B.WhiteNoise_k = systema_DW.NextOutput_e;
    /* Gain: '<S23>/Output' */
    systema_B.Output_l = systema_P.Output_Gain_ah * systema_B.WhiteNoise_k;
}
%<tlcOutputsFcnOfS0B12>\
/* Sum: '<S17>/Sum6' */
systema_B.Sum6 = systema_B.Output_l + systema_B.YAWTransportDelay;
if (%<(SLibCGIRIsSampleHit(1, 0))>) {
    /* RandomNumber: '<S20>/White Noise' */
    systema_B.WhiteNoise_ji = systema_DW.NextOutput_n;
    /* Gain: '<S20>/Output' */
    systema_B.Output_io = systema_P.Output_Gain_m * systema_B.WhiteNoise_ji;
}
%<tlcOutputsFcnOfS0B13>\
/* Sum: '<S17>/Sum7' */
systema_B.Sum7 = systema_B.Output_io + systema_B.dotYAWTransportDelay;
if (%<(SLibCGIRIsSampleHit(1, 0))>) {
    /* RandomNumber: '<S24>/White Noise' */
    systema_B.WhiteNoise_l = systema_DW.NextOutput_f;
    /* Gain: '<S24>/Output' */
    systema_B.Output_e = systema_P.Output_Gain_l * systema_B.WhiteNoise_l;
}
/* Sum: '<S17>/Sum8' */
systema_B.Sum8 = systema_B.Output_e + systema_B.Integrator[6];
%<tlcOutputsFcnOfS0B14>\
/* RateTransition: '<S13>/Roll Rate Transition' */
if (!(systema_DW.RollRateTransition_semaphoreTak != 0)) {
    systema_DW.RollRateTransition_Buffer0 = systema_B.LPFILTER[0];
}
/* End of RateTransition: '<S13>/Roll Rate Transition' */

/* RateTransition: '<S13>/Pitch Rate Transition' */
if (!(systema_DW.PitchRateTransition_semaphoreTa != 0)) {
    systema_DW.PitchRateTransition_Buffer0 = systema_B.LPFILTER[2];
}
/* End of RateTransition: '<S13>/Pitch Rate Transition' */

/* RateTransition: '<S13>/Z Rate Transition' */
if (!(systema_DW.ZRateTransition_semaphoreTaken != 0)) {
    systema_DW.ZRateTransition_Buffer0 = systema_B.LPFILTER[6];
}
/* End of RateTransition: '<S13>/Z Rate Transition' */
%<tlcOutputsFcnOfS0B15>\
/* RateTransition: '<Root>/Rate Transition' */
if (%<(LibIsSpecialSampleHit(2, 0))>) {
    systema_B.RateTransition = systema_B.InterpretedMATLABFunction;
}
/* End of RateTransition: '<Root>/Rate Transition' */

/* RateTransition: '<S14>/Rate Transition1' incorporates:
 *  Constant: '<Root>/dotXd [m//s]'
 *  Constant: '<Root>/dotYd [m//s]'
 */
if (%<(SLibCGIRIsSampleHit(1, 0))>) {
    systema_B.RateTransition1 = systema_DW.RateTransition1_Buffer[systema_DW.RateTransition1_ActiveBufIdx];
    systema_B.dotXdms = systema_P.dotXdms_Value;
    systema_B.dotYdms = systema_P.dotYdms_Value;
}
/* End of RateTransition: '<S14>/Rate Transition1' */
%<tlcOutputsFcnOfS0B17>\
if (%<(SLibCGIRIsSampleHit(1, 0))>) {
    /* Constant: '<Root>/Yawd [rad]' */
    systema_B.Yawdrad = systema_P.Yawdrad_Value;
}
%<tlcOutputsFcnOfS0B18>\
%<tlcOutputsFcnOfS0B19>\
%<tlcOutputsFcnOfS0B20>\
%<tlcOutputsFcnOfS0B21>\
%<tlcOutputsFcnOfS0B22>\
%<tlcOutputsFcnOfS0B23>\
%<tlcOutputsFcnOfS0B24>\
/* Saturate: '<S8>/Saturation' */
u = systema_B.U2bin[0];
u_0 = systema_P.Saturation_LowerSat;
u_1 = systema_P.Saturation_UpperSat;
if (u >= u_1) {
    u = u_1;
} else {
    if (u <= u_0) {
        u = u_0;
    }
}
systema_B.Saturation[0] = u;
u = systema_B.U2bin[1];
u_0 = systema_P.Saturation_LowerSat;
u_1 = systema_P.Saturation_UpperSat;
if (u >= u_1) {
    u = u_1;
} else {
    if (u <= u_0) {
        u = u_0;
    }
}
systema_B.Saturation[1] = u;
u = systema_B.U2bin[2];
u_0 = systema_P.Saturation_LowerSat;
u_1 = systema_P.Saturation_UpperSat;
if (u >= u_1) {
    u = u_1;
} else {
    if (u <= u_0) {
        u = u_0;
    }
}
systema_B.Saturation[2] = u;
u = systema_B.U2bin[3];
u_0 = systema_P.Saturation_LowerSat;
u_1 = systema_P.Saturation_UpperSat;
if (u >= u_1) {
    u = u_1;
} else {
    if (u <= u_0) {
        u = u_0;
    }
}
systema_B.Saturation[3] = u;
/* End of Saturate: '<S8>/Saturation' */
%<SLibInsertSolverResetCode()>\
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 4, fcnProtoType)>

%assign localVarDecl = ""
%openfile localVarDecl
real_T u;
real_T u_0;
real_T u_1;

%closefile localVarDecl
%<LibSetSystemField(system, "CachedOutput0LocalVars", localVarDecl)>
%assign ::GlobalCurrentTID = []
%endif
%if tid == 2
%assign ::GlobalCurrentTID = 2
%assign tlcOutputsFcnOfS0B16 = OpaqueTLCBlockFcn("Outputs", 0, 16, 0, 5)
%<SLibCG_TrackDW(0)>\
%<SLibCG_TrackBlockIO(0)>\
/* RateTransition: '<S13>/Roll Rate Transition' */
systema_DW.RollRateTransition_semaphoreTak = 1;
systema_B.RollRateTransition = systema_DW.RollRateTransition_Buffer0;
systema_DW.RollRateTransition_semaphoreTak = 0;
/* RateTransition: '<S13>/Pitch Rate Transition' */
systema_DW.PitchRateTransition_semaphoreTa = 1;
systema_B.PitchRateTransition = systema_DW.PitchRateTransition_Buffer0;
systema_DW.PitchRateTransition_semaphoreTa = 0;
/* RateTransition: '<S13>/Z Rate Transition' */
systema_DW.ZRateTransition_semaphoreTaken = 1;
systema_B.ZRateTransition = systema_DW.ZRateTransition_Buffer0;
systema_DW.ZRateTransition_semaphoreTaken = 0;
%<tlcOutputsFcnOfS0B16>\
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 5, fcnProtoType)>
%assign ::GlobalCurrentTID = []
%endif
%endfunction
